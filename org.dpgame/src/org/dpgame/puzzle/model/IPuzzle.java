/*
 * Copyright (C) 2014 Hande Özaygen
 *
 * This file is part of dpgame.
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>
 */
package org.dpgame.puzzle.model;

import java.util.ArrayList;

import org.dpgame.puzzle.model.components.IBoard;
import org.dpgame.puzzle.model.components.IPuzzleComponent;
import org.dpgame.puzzle.model.components.ISolutionCompiler;
import org.dpgame.puzzle.model.components.ISolutionPart;
import org.dpgame.puzzle.model.components.ITool;
import org.dpgame.puzzle.model.components.IToolbox;
import org.dpgame.puzzle.model.objects.IBoardObject;

/**
 * A puzzle is the basic component of the game.
 * <p>
 * The goal of the player is to solve the puzzle. The puzzle is basically
 * composed of a board (see {@link IBoard}) with board objects (see
 * {@link IBoardObject}) on it, a tool-box (see {@link IToolbox}) that contains
 * tools (see {@link ITool}) to solve the puzzle and a solver (see
 * {@link ISolver}) that applies the solution generated by the player. The
 * puzzle requires application of a certain type of design pattern to be solved.
 * The generated solution is first compiled by the solution compiler (see
 * {@link ISolutionCompiler}).
 * 
 * @see IBoard
 * @see IBoardObject
 * @see IToolbox
 * @see ITool
 * @see ISolutionCompiler
 * @see ISolver
 * 
 * @author Hande Özaygen
 * @version 1.1.2
 * 
 */
public interface IPuzzle extends IPuzzleComponent {

	/**
	 * Runs the specified solution formed by the player using the puzzle GUI.
	 * 
	 * @param solutionParts
	 *            the parts of solution to be combined and compiled by the
	 *            solution compiler.
	 * 
	 * @return true if the puzzle is solved; false otherwise.
	 */
	public boolean runSolution(ArrayList<ISolutionPart> solutionParts);

}
